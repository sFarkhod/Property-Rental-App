c// @ts-nocheck
import React, { useState, useEffect, useRef } from "react";
import { View, Image, Pressable } from "react-native";
import ImageView from "react-native-image-viewing";
// import { VStack } from "native-base";
import {
  Center,
  HStack,
  Heading,
  Icon,
  Input,
  Stack,
  VStack,
  Skeleton,
  Modal,
  Button,
  Popover,
  ScrollView,
  Text,
} from "native-base";
import { MaterialIcons } from "@expo/vector-icons";
import { Video } from 'expo-av';

const ImageIndicator = ({ totalImages, currentIndex }) => {
  return (
    <View
      style={{
        flexDirection: "row",
        justifyContent: "center",
        marginTop: 10,
      }}
    >
      {Array.from({ length: totalImages }).map((_, index) => (
        <View
          key={index}
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            marginHorizontal: 5,
            backgroundColor: index === currentIndex ? "blue" : "gray",
          }}
        />
      ))}
    </View>
  );
};

const RealEstateDetail = ({ route }) => {
  const { estate } = route.params;
  const [isImageViewVisible, setImageViewVisible] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);

  const images = [
    {
      uri: `https://absolute-initially-slug.ngrok-free.app/media/images/${getImagePath(
        estate.image1
      )}`,
    },
    {
      uri: `https://absolute-initially-slug.ngrok-free.app/media/images/${getImagePath(
        estate.image2
      )}`,
    },
    {
      uri: `https://absolute-initially-slug.ngrok-free.app/media/images/${getImagePath(
        estate.image3
      )}`,
    },
  ];

  return (
    <ScrollView style={{ backgroundColor: "#f2f7ff" }}>
      <VStack mt={30} mr={5} ml={5}>
        {/* Display details, including the large image */}
        <Pressable onPress={() => setImageViewVisible(true)}>
          <Image
            source={{ uri: images[0].uri }}
            resizeMode="cover"
            height={300}
          />
        </Pressable>

        {/* Swipeable Image Viewer */}
        <ImageView
          images={images}
          imageIndex={currentIndex}
          visible={isImageViewVisible}
          onRequestClose={() => setImageViewVisible(false)}
          onIndexChange={(index) => setCurrentIndex(index)}
          animationType="fade"
        />
        <ImageIndicator
          totalImages={images.length}
          currentIndex={currentIndex}
        />
        <Stack p={4} space={3}>
          <Stack space={2}>
            <Heading size="md" ml={-1}>
              {estate.title}
            </Heading>
            <Text
              fontSize="xs"
              _light={{ color: "violet.500" }}
              _dark={{ color: "violet.400" }}
              fontWeight="500"
              ml={-0.5}
              mt={-1}
            >
              {estate.description}
            </Text>
          </Stack>
          <Text fontWeight="400">Price: {estate.price} $</Text>
          <Text fontWeight="400" color={'danger.400'}>Realtor Price: {estate.rieltor_price} $</Text>
          <HStack alignItems="center" space={4} justifyContent="space-between">
            <HStack alignItems="center">
              <Text
                color="coolGray.600"
                _dark={{ color: "warmGray.200" }}
                fontWeight="400"
                fontSize="xs"
              >
                {formatDate(estate.created_at)}
              </Text>
            </HStack>
          </HStack>
          <HStack alignItems="center" space={4} justifyContent="space-between">
            <HStack alignItems="center">
              <Icon
                as={<MaterialIcons name="home" />}
                size={5}
                color="orange.500"
              />
              <Text
                color="coolGray.600"
                _dark={{ color: "warmGray.200" }}
                fontWeight="400"
                fontSize="xs"
                ml={2}
              >
                {"Height: " +
                  estate?.hajmi?.height +
                  "   " +
                  "Width: " +
                  estate?.hajmi?.width +
                  "   " +
                  "Depth:  " +
                  estate?.hajmi?.depth}
              </Text>
              {/* hajmi, location, rieltor_price, video */}
            </HStack>
          </HStack>
          <HStack alignItems="center" space={4} justifyContent="space-between">
            <HStack alignItems="center">
              <Icon
                as={<MaterialIcons name="location-on" />}
                size={5}
                color="orange.500"
              />
              <Text
                color="coolGray.600"
                _dark={{ color: "warmGray.200" }}
                fontWeight="400"
                fontSize="xs"
                ml={2}
              >
                {"Location: " + estate.location}
              </Text>
            </HStack>
          </HStack>
          {estate.video ? (
            <VideoComponent uri={estate.video} />
          ) : (
            <></>
          )}
        </Stack>
      </VStack>
    </ScrollView>
  );
};

const VideoComponent = ({ uri }) => {
  const videoRef = useRef(null);
  const [status, setStatus] = React.useState({});
  console.log(uri)

  // useEffect(() => {
  //   console.log('Loading video:', uri);

  //   if (videoRef.current) {
  //     videoRef.current.loadAsync({ uri }, {}, false)
  //       .then(() => console.log('Video loaded successfully'))
  //       .catch(error => console.error('Error loading video:', error));
  //   }

  //   return () => {
  //     if (videoRef.current) {
  //       console.log('Unloading video');
  //       videoRef.current.unloadAsync()
  //         .then(() => console.log('Video unloaded successfully'))
  //         .catch(error => console.error('Error unloading video:', error));
  //     }
  //   };
  // }, [uri]);

  return (
    <View>
      <Video
        ref={videoRef}
        style={{ width: 300, height: 200 }}
        source={{uri:'http://absolute-initially-slug.ngrok-free.app/media/videos/1.mp4'}}
        useNativeControls
        resizeMode="contain"
        // shouldPlay={true}
        isLooping
        onPlaybackStatusUpdate={status => setStatus(() => status)}
      />
      <View>
        <Button
          title={status.isPlaying ? 'Pause' : 'Play'}
          onPress={() =>
            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
          }
        />
      </View>
    </View>
  );
};


const formatDate = (timestamp: string): string => {
  const date = new Date(timestamp);
  const day = date.getUTCDate();
  const month = date.getUTCMonth() + 1;
  const year = date.getUTCFullYear() % 100;
  const hours = date.getUTCHours();
  const minutes = date.getUTCMinutes();

  return `${day}/${month}/${year} ${hours}:${minutes}`;
};

const getImagePath = (fullImagePath: string): string => {
  const imagePath = fullImagePath.split("images/")[1];
  return imagePath;
};

export default RealEstateDetail;
